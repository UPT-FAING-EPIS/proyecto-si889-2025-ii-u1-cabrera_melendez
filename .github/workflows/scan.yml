# Nombre del flujo de trabajo de GitHub Actions
name: Static Analysis

# CONFIGURACIÓN REQUERIDA:
# 1. SONAR_TOKEN: Debes configurar este secreto en GitHub (Settings > Secrets and variables > Actions)
#    Obtén el token desde tu cuenta de SonarCloud (My Account > Security > Generate Token)
# 2. Reemplaza "tu-organizacion-sonar" con el nombre de tu organización en SonarCloud
# 3. Reemplaza "tu-clave-de-proyecto-sonar" con la clave de tu proyecto en SonarCloud

# Disparadores: se ejecuta en cada push y pull request a la rama 'main'
on:
  push:
    branches:
      - main
      - feature/issues-gabriel
  pull_request:
    branches:
      - main
      - feature/issues-gabriel

# Permisos necesarios para que las actions puedan interactuar con el repositorio
permissions:
  contents: read

jobs:
  # ------ TRABAJO 1: ANÁLISIS CON SONARCLOUD ------
  sonarcloud:
    name: SonarCloud Analysis
    # Se ejecuta en la última versión de Ubuntu
    runs-on: ubuntu-latest
    # Pasos a ejecutar en este trabajo
    steps:
      # 1. Clona el código del repositorio
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Necesario para que SonarCloud pueda analizar el historial de commits
          fetch-depth: 0

      # 2. Instala el JDK (Java Development Kit), requerido por el escáner de Sonar
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      # 3. Instala y configura el SDK de Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 4. Instala las dependencias del proyecto Flutter
      - name: Install dependencies
        # CORRECCIÓN: Ejecuta el comando en el directorio del proyecto
        working-directory: ./simulapp
        run: flutter pub get

      # 5. Ejecuta las pruebas y genera el informe de cobertura
      # SonarCloud utilizará el archivo 'lcov.info' para reportar la cobertura del código
      - name: Run tests and generate coverage
        # CORRECCIÓN: Ejecuta el comando en el directorio del proyecto
        working-directory: ./simulapp
        run: flutter test --coverage

      # 6. Ejecuta el escáner de SonarCloud
      # Esta action oficial se encarga de ejecutar el análisis y enviar los resultados a SonarCloud.io
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          # Token de SonarCloud almacenado en los secretos de GitHub
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # GITHUB_TOKEN es un token especial que GitHub proporciona automáticamente
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Argumentos para el escáner:
          # IMPORTANTE: Reemplaza los siguientes valores con los de tu proyecto SonarCloud:
          # - tu-organizacion-sonar → Nombre de tu organización en SonarCloud
          # - tu-clave-de-proyecto-sonar → Clave de tu proyecto en SonarCloud
          args: >
            -Dsonar.organization=tu-organizacion-sonar
            -Dsonar.projectKey=tu-clave-de-proyecto-sonar
            -Dsonar.projectBaseDir=simulapp
            -Dsonar.sources=lib
            -Dsonar.tests=test
            -Dsonar.dart.lcov.reportPaths=coverage/lcov.info

 # ------ TRABAJO 2: ANÁLISIS CON SEMGREP ------
  semgrep:
    name: Semgrep Analysis
    permissions:
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      # 1. Clona el código del repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Ejecuta el análisis de Semgrep
      - name: Run Semgrep
        # CORRECCIÓN: Se cambia la versión de la acción de v2 a v1
        uses: semgrep/semgrep-action@v1
        with:
          publish_token: ${{ secrets.GITHUB_TOKEN }}
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}